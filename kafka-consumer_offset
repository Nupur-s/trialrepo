//consumer

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.common.serialization.StringDeserializer;

import java.time.Duration;
import java.util.Collections;
import java.util.Properties;

public class KafkaOffsetDemo {

    private static KafkaConsumer<String, String> createConsumer(String offsetResetConfig) {
        Properties properties = new Properties();
        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        properties.put(ConsumerConfig.GROUP_ID_CONFIG, "offset-demo-group");
        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        properties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, offsetResetConfig); // earliest, latest, none
        properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, "true");

        return new KafkaConsumer<>(properties);
    }

    private static void consumeMessages(String topic, String offsetResetConfig) {
        KafkaConsumer<String, String> consumer = createConsumer(offsetResetConfig);
        consumer.subscribe(Collections.singletonList(topic));

        System.out.println("Starting consumer with " + offsetResetConfig + " offset reset policy...");

        while (true) {
            ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));
            for (ConsumerRecord<String, String> record : records) {
                System.out.printf("Consumed message with key: %s, value: %s, offset: %d%n",
                        record.key(), record.value(), record.offset());
            }
        }
    }

    public static void main(String[] args) {
        String topic = "offset-demo-topic";
        
        // Demonstrate earliest offset setting
        new Thread(() -> consumeMessages(topic, "earliest")).start();
        
        // Demonstrate latest offset setting
        new Thread(() -> consumeMessages(topic, "latest")).start();
        
        // Uncomment to demonstrate none offset setting
        // new Thread(() -> consumeMessages(topic, "none")).start();
    }
}


//producer

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.apache.kafka.common.serialization.StringSerializer;

import java.util.Properties;
import java.util.concurrent.Future;

public class KafkaMessageProducer {

    private static KafkaProducer<String, String> createProducer() {
        Properties properties = new Properties();
        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        properties.put(ProducerConfig.ACKS_CONFIG, "all");

        return new KafkaProducer<>(properties);
    }

    public static void sendMessages(String topic, int messageCount) {
        KafkaProducer<String, String> producer = createProducer();

        try {
            for (int i = 1; i <= messageCount; i++) {
                String key = "key-" + i;
                String value = "message-" + i;

                ProducerRecord<String, String> record = new ProducerRecord<>(topic, key, value);
                Future<RecordMetadata> future = producer.send(record, (metadata, exception) -> {
                    if (exception == null) {
                        System.out.printf("Sent message with key: %s, value: %s to partition: %d with offset: %d%n",
                                key, value, metadata.partition(), metadata.offset());
                    } else {
                        System.err.println("Error sending message: " + exception.getMessage());
                    }
                });

                // Optional: Wait for the message to be acknowledged (not required but useful for demo)
                future.get();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            producer.close();
        }
    }

    public static void main(String[] args) {
        String topic = "offset-demo-topic";
        int messageCount = 10; // Number of messages to send

        sendMessages(topic, messageCount);
    }
}
